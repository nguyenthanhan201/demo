name: Vercel Nextjs Module Livestream Production Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

on:
  push:
    branches:
      - 'production/**'

jobs:
  job1:
    runs-on: ubuntu-latest

    outputs:
      my_output: ${{ steps.out1.outputs.my_output }}
      output_2: ${{ steps.out2.outputs.output_2  }}
      app-shell: ${{ steps.out3.outputs.app-shell }}

    steps:
      - name: output one line
        id: out1
        run: echo 'my_output="Hello, world!"' >> $GITHUB_OUTPUT

      - name: output two line
        id: out2
        run: |
          echo 'output_2="Hello, chicago!"' >> $GITHUB_OUTPUT
      - name: output three line
        id: out3
        run: |
          echo 'app-shell="prj_QaSqKm52IHermZtIu9jAvcv4VWSi"' >> $GITHUB_OUTPUT

  job2:
    needs: job1
    runs-on: ubuntu-latest

    outputs:
      VERCEL_PROJECT_ID: ${{ steps.get_outputs.outputs.VERCEL_PROJECT_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: get all outputs from prior job
        id: get_outputs
        run: |
          echo "Full branch name: ${{ github.ref_name }}"


          # Check if the branch name starts with 'production/'

          if [[ "${{ github.ref_name }}" == production/* ]]; then
            # Extract suffix after 'production/'
            SUFFIX="${GITHUB_REF_NAME#production/}"
            echo "Suffix after 'production/': $SUFFIX"

            # Convert outputs from prior job (job1) to JSON
            jobjson='${{ toJSON(needs.job1.outputs) }}'
            echo "The outputs are: $jobjson"

            # Parse JSON using jq
            echo "$jobjson" | jq

            # Safely retrieve specific value using suffix
            output=$(echo "$jobjson" | jq -r ".\"${SUFFIX}\"")
            echo "VERCEL_PROJECT_ID is $output"
            echo "VERCEL_PROJECT_ID=$output" >> $GITHUB_ENV

          else
            echo "Branch does not start with 'production/'. Exiting..."
            exit 1
          fi

  job3:
    needs: job2
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        env:
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8.9.0 # Optional: specify a pnpm version
      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=apps/app-shell
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
